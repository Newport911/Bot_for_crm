from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton
from cachetools import TTLCache
import os
from dotenv import load_dotenv

import httpx
from requests.auth import HTTPBasicAuth

load_dotenv()

API_ID = os.getenv("api_id")
API_HASH = os.getenv("api_hash")
BOT_TOKEN = os.getenv("bot_token")
API_URL = os.getenv("API_URL")
USERNAME = os.getenv("PRODUCTS_API_USERNAME")
PASSWORD = os.getenv("PRODUCTS_API_PASSWORD")
API_URL_FOR_ORDER = os.getenv("API_URL_FOR_ORDER")

cache = TTLCache(maxsize=1, ttl=300)

TIMEOUT = 30.0
REQUEST_TIMEOUT = httpx.Timeout(TIMEOUT) #—Ç–∞–π–º–∞–π—É—Ç –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ –±—ã —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–≤–∏—Å–∞–ª–∏ –Ω–∞–º–µ—Ä—Ç–≤–æ –µ—Å–ª–∏ api –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

app = Client(
    "my_bot",
    api_id=API_ID, api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

@app.on_message(filters.command("start") & filters.private)
async def start(client, message):
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"), KeyboardButton("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")],
            [KeyboardButton("–ù–∞—à–∏ —Å–æ—Ü —Å–µ—Ç–∏"), KeyboardButton("–ü–ª–µ–Ω–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏")]
        ],
        resize_keyboard=True
    )
    await message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)


user_data = {}


@app.on_message(filters.text & filters.private & filters.regex("^–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞$"))
async def status_order(client, message):
    await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    user_data[message.from_user.id] = {}

    @app.on_message(filters.text & filters.private)
    async def get_phone_number(client, message):
        if message.from_user.id in user_data and "phone_number" not in user_data[message.from_user.id]:
            phone_number = message.text.strip()

            # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫ "+" –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if phone_number.startswith("+"):
                phone_number = phone_number[1:]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if phone_number.isdigit():
                user_data[message.from_user.id]["phone_number"] = phone_number
                await message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
            else:
                await message.reply_text("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif message.from_user.id in user_data and "phone_number" in user_data[message.from_user.id]:
            order_number = message.text.strip()

            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–∫–≤—ã
            if order_number[:2].isalpha():
                order_number = order_number[2:]

            phone_number = user_data[message.from_user.id]["phone_number"]
            await check_order_status(client, message, phone_number, order_number)
            del user_data[message.from_user.id]


async def check_order_status(client, message, phone_number, order_number):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL_FOR_ORDER}{order_number}/",
                                        auth=HTTPBasicAuth(USERNAME, PASSWORD),
                                        timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            order_data = response.json()
            if order_data["client"]["phone_number"] == phone_number:
                order_status_choices = order_data['status']
                status_choices = {
                    'opl_na_proyavku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ—è–≤–∫—É! üéû',
                    'opl_na_skan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üéû',
                    'opl_na_otpravku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É!',
                    'opl_na_pechat': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–µ—á–∞—Ç—å! üå†',
                    'opl_gotov': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ üí´ –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å!',
                    'opl_gotov_otpr': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ e-mail üì©',
                    'opl_gotov_otpr_otdan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ e-mail –∏ –æ—Ç–¥–∞–Ω —Ç–µ–±–µ üôÇ',
                    'opl_gotov_otdan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤ –∏ –æ—Ç–¥–∞–Ω —Ç–µ–±–µ üôÇ',
                    'no_gotov': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤',
                    'srchno_opl_na_proyavku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: ‚ö°Ô∏è—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑‚ö°Ô∏è, –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ—è–≤–∫—É!',
                    'srchno_opl_na_skan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:‚ö°Ô∏è—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑‚ö°Ô∏è, –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!',
                }
                order_status_choices = status_choices[order_status_choices]
                await message.reply_text(f"{order_status_choices}")
            else:
                await message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É –≤ –∑–∞–∫–∞–∑–µ.")
    except httpx.RequestError as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ {e}")


@app.on_message(filters.text & filters.private & filters.regex("^–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å$"))
async def help_request(client, message):
    manager_username = "phsquat_chat"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await message.reply_text(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://t.me/{manager_username}")

@app.on_message(filters.text & filters.private & filters.regex("^–ù–∞—à–∏ —Å–æ—Ü —Å–µ—Ç–∏$"))
async def social_media(client, message):
    await message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏")

@app.on_message(filters.text & filters.private & filters.regex("^–ü–ª–µ–Ω–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏$"))
async def available_products(client, message):
    if "products" in cache:
        product_list = cache["products"]
        print("–ü–æ–¥–Ω—è–ª–∏ —Å –∫—ç—à–∞")
    else:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(API_URL, auth=HTTPBasicAuth(USERNAME, PASSWORD), timeout=REQUEST_TIMEOUT)
                response.raise_for_status()
                products = response.json()
                product_list = "üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
                for product in products:
                    quantity = product['quantity']
                    if quantity < 2:
                        quantity_text = "–û—Å—Ç–∞–ª–∞—Å—å –ø–∞—Ä–∞ —à—Ç—É–∫"
                    elif quantity < 10:
                        quantity_text = "–û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"
                    elif quantity < 20:
                        quantity_text = "–ú–Ω–æ–≥–æ"
                    else:
                        quantity_text = "–¶–µ–ª–∞—è –≥–æ—Ä–∞"
                    product_list += f"üîπ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {product['name']}\nüí∞ –¶–µ–Ω–∞: {product['price']}\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_text}\n\n"
                cache["products"] = product_list
        except httpx.RequestError as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ {e}")
            return

    await message.reply_text(product_list)

if __name__ == "__main__":
    app.run()