import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from requests.auth import HTTPBasicAuth
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Your Django API endpoint and credentials
API_URL = os.getenv("API_URL")
USERNAME = os.getenv("USERNAME")
PASSWORD = os.getenv("PASSWORD")

# Dictionary for status translation
STATUS_CHOICES = {
    # Add your status choices here
}

# Dictionary to track the last request time for each user
user_last_request_time = {}

# Minimum interval between requests (e.g., 5 seconds)
MIN_REQUEST_INTERVAL = timedelta(seconds=5)

async def check_rate_limit(user_id):
    now = datetime.now()
    if user_id in user_last_request_time:
        last_request_time = user_last_request_time[user_id]
        time_since_last_request = now - last_request_time
        if time_since_last_request < MIN_REQUEST_INTERVAL:
            remaining_time = MIN_REQUEST_INTERVAL - time_since_last_request
            return False, remaining_time
    user_last_request_time[user_id] = now
    return True, None

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    allowed, remaining_time = await check_rate_limit(user_id)
    if not allowed:
        seconds_left = int(remaining_time.total_seconds())
        await update.message.reply_text(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {seconds_left} —Å–µ–∫—É–Ω–¥."
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"],
        ["–ü–æ–º–æ—â—å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
        ["–ü–ª–µ–Ω–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.',
        reply_markup=reply_markup
    )

async def check_order_status(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    allowed, remaining_time = await check_rate_limit(user_id)
    if not allowed:
        seconds_left = int(remaining_time.total_seconds())
        await update.message.reply_text(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {seconds_left} —Å–µ–∫—É–Ω–¥."
        )
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        parts = update.message.text.split()
        if len(parts) != 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return

        order_number, phone_number = parts

        # –£–±–∏—Ä–∞–µ–º '+' –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if phone_number.startswith('+'):
            phone_number = phone_number[1:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
        url = f"{API_URL}{order_number}/"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        response = requests.get(url, auth=HTTPBasicAuth(USERNAME, PASSWORD))

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"API response: {response.status_code} {response.text}")

        if response.status_code == 200:
            order_data = response.json()
            if order_data['client']['phone_number'] == phone_number:
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ STATUS_CHOICES
                status_description = STATUS_CHOICES.get(order_data['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                message = (
                    f"{status_description}\n"
                )
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.")
        else:
            await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error checking order status: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

async def available_products_command(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    allowed, remaining_time = await check_rate_limit(user_id)
    if not allowed:
        seconds_left = int(remaining_time.total_seconds())
        await update.message.reply_text(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {seconds_left} —Å–µ–∫—É–Ω–¥."
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        products_url = os.getenv("PRODUCTS_API_URL")
        username = os.getenv("PRODUCTS_API_USERNAME")
        password = os.getenv("PRODUCTS_API_PASSWORD")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(products_url, auth=HTTPBasicAuth(username, password))

        if response.status_code == 200:
            products = response.json()
            message = "üì¶ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n"
            for product in products:
                price = float(product['price'])
                discount = float(product['discount'])
                final_price = price - discount if discount > 0 else price

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                quantity = product['quantity']
                if quantity < 2:
                    quantity_text = "–û—Å—Ç–∞–ª–∞—Å—å –ø–∞—Ä–∞ —à—Ç—É–∫"
                elif quantity < 10:
                    quantity_text = "–û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"
                elif quantity < 20:
                    quantity_text = "–ú–Ω–æ–≥–æ"
                else:
                    quantity_text = "–¶–µ–ª–∞—è –≥–æ—Ä–∞"

                message += (
                    f"üîπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product['name']}\n"
                    f"üí∞ *–¶–µ–Ω–∞:* {final_price:.2f} {'(–°–∫–∏–¥–∫–∞: ' + str(discount) + ')' if discount > 0 else ''}\n"
                    f"üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity_text}\n\n"
                )
            await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error fetching available products: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

async def contact_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç—ã: support@example.com, –¢–µ–ª–µ—Ñ–æ–Ω: +123456789")

def main() -> None:
    """Start the bot."""
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))

    # Add handlers for button presses
    application.add_handler(MessageHandler(filters.Regex('^–ü–ª–µ–Ω–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏$'), available_products_command))
    application.add_handler(MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞$'), check_order_status))
    application.add_handler(MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(MessageHandler(filters.Regex('^–ö–æ–Ω—Ç–∞–∫—Ç—ã$'), contact_command))

    # on noncommand i.e message - check order status
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_order_status))

    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()