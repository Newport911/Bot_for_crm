import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from requests.auth import HTTPBasicAuth
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Your Django API endpoint and credentials
API_URL = os.getenv("API_URL")
USERNAME = os.getenv("USERNAME")
PASSWORD = os.getenv("PASSWORD")

# Dictionary for status translation
STATUS_CHOICES = {
    'opl_na_proyavku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ—è–≤–∫—É! üéû',
    'opl_na_skan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üéû',
    'opl_na_otpravku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É!',
    'opl_na_pechat': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–µ—á–∞—Ç—å! üå†',
    'opl_gotov': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ üí´ –ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å!',
    'opl_gotov_otpr': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ e-mail üì©',
    'opl_gotov_otpr_otdan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ e-mail –∏ –æ—Ç–¥–∞–Ω —Ç–µ–±–µ üôÇ',
    'opl_gotov_otdan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤ –∏ –æ—Ç–¥–∞–Ω —Ç–µ–±–µ üôÇ',
    'no_gotov': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤',
    'srchno_opl_na_proyavku': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞: ‚ö°Ô∏è—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑‚ö°Ô∏è, –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ—è–≤–∫—É!',
    'srchno_opl_na_skan': '–°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:‚ö°Ô∏è—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑‚ö°Ô∏è, –æ–ø–ª–∞—á–µ–Ω, –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!',
}

async def start(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"],
        ["–ü–æ–º–æ—â—å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.',
        reply_markup=reply_markup
    )

async def check_order_status(update: Update, context: CallbackContext) -> None:
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        parts = update.message.text.split()
        if len(parts) != 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return

        order_number, phone_number = parts

        # –£–±–∏—Ä–∞–µ–º '+' –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if phone_number.startswith('+'):
            phone_number = phone_number[1:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
        url = f"{API_URL}{order_number}/"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        response = requests.get(url, auth=HTTPBasicAuth(USERNAME, PASSWORD))

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"API response: {response.status_code} {response.text}")

        if response.status_code == 200:
            order_data = response.json()
            if order_data['client']['phone_number'] == phone_number:
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ STATUS_CHOICES
                status_description = STATUS_CHOICES.get(order_data['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                message = (
                    f"{status_description}\n"
                )
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.")
        else:
            await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error checking order status: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

async def contact_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç—ã: support@example.com, –¢–µ–ª–µ—Ñ–æ–Ω: +123456789")

def main() -> None:
    """Start the bot."""
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))

    # on noncommand i.e message - check order status
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_order_status))

    # Add handlers for button presses
    application.add_handler(MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞$'), check_order_status))
    application.add_handler(MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(MessageHandler(filters.Regex('^–ö–æ–Ω—Ç–∞–∫—Ç—ã$'), contact_command))

    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()